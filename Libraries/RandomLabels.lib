RunAsAdmin:
RunAsAdmin=1
IniWrite, %RunAsAdmin%, settings.ini, settings, RunAsAdmin
FadeOut(AdminPrompt)
GoSub SettingsWndFirst
return

NotAnAdmin:
RunAsAdmin=0
IniWrite, %RunAsAdmin%, settings.ini, settings, RunAsAdmin
FadeOut(AdminPrompt)
GoSub SettingsWndFirst
return

ARun:
IniRead, RunAsAdmin, settings.ini, settings, RunAsAdmin, 0
If RunAsAdmin
RunAsAdmin()
Else
GoSub RSRunScript
return


UpdateCheck:
IniRead, ExitVar, build.ini, build, ExitVar
If ExitVar=1
ExitApp
return

SuspendScriptToggle:
Suspend, Toggle
If A_IsSuspended
{
	Menu, TRAY, Icon, RSStopped.ico,,1
	RSNotify("Suspended", 126, 13)
	If A_IsPaused
		Pause, Off
}
If !A_IsSuspended
{
	Menu, TRAY, Icon, RSIcon.ico,,1
	RSNotify("Released", 126, 13)
	If A_IsPaused
	Pause, Off
}
return

playpause:
	Send {Media_Play_Pause}
	RSNotify("Play/Pause", 115, 13)
return

stopbutton:
	Send {Media_Stop}
	RSNotify("Stopped", 100, 13)
return

CheckBreakLoop:
If BreakLoop=1
GoSub Protection
return

ws1:
Run, %ws1%
SetTimer, WebLGuiEscape, -100
return

ws2:
Run, %ws2%
SetTimer, WebLGuiEscape, -100
return

ws3:
Run, %ws3%
SetTimer, WebLGuiEscape, -100
return

ws4:
Run, %ws4%
SetTimer, WebLGuiEscape, -100
return

ws5:
Run, %ws5%
SetTimer, WebLGuiEscape, -100
return

ws6:
Run, %ws6%
SetTimer, WebLGuiEscape, -100
return

ws7:
Run, %ws7%
SetTimer, WebLGuiEscape, -100
return

ws8:
Run, %ws8%
SetTimer, WebLGuiEscape, -100
return

plus1:
Formula:= Formula*10+1
GoSub PasswordCover
Gosub UnlockPC
return

plus2:
Formula:= Formula*10+2
GoSub PasswordCover
Gosub UnlockPC
return

plus3:
Formula:= Formula*10+3
GoSub PasswordCover
Gosub UnlockPC
return

plus4:
Formula:= Formula*10+4
GoSub PasswordCover
Gosub UnlockPC
return

plus5:
Formula:= Formula*10+5
GoSub PasswordCover
Gosub UnlockPC
return

plus6:
Formula:= Formula*10+6
GoSub PasswordCover
Gosub UnlockPC
return

plus7:
Formula:= Formula*10+7
GoSub PasswordCover
Gosub UnlockPC
return

plus8:
Formula:= Formula*10+8
GoSub PasswordCover
Gosub UnlockPC
return

plus9:
Formula:= Formula*10+9
GoSub PasswordCover
Gosub UnlockPC
return

plus0:
Formula:= Formula*10+0
GoSub PasswordCover
Gosub UnlockPC
return

MouseIsOver(WinTitle) 
{
	MouseGetPos,,, Win
	return WinExist(WinTitle . " ahk_id " . Win)
}

vol_up:
	Suspend, Permit
	SoundSet, +2
	gosub, Volume_Show_OSD
return
vol_down:
	Suspend, Permit
	SoundSet, -2
	gosub, Volume_Show_OSD
return

NextSong:
	Send {Media_Next}
	RSNotify("Next", 95, 13)
return

PrevSong:
	Send {Media_Prev}
	RSNotify("Previous", 102, 13)
return

DontDoItLabel:
DontDoItTwice=0
return

GuiClose:
   Gui, Destroy
   CtlColors.Free()
GuiEscape:
	CtlColors.Free()
Return

GuiMove:
   PostMessage, 0xA1, 2
return

GuiFade:
	FadeOut(WarningGUI)
return

;=====------======------=====------======------=====------======------=====------======------=====------======------=====------======------
;=====------======------=====------======------=====------======------TRIGGERS-----======------======------=====------======------=====----
;=====------======------=====------======------=====------======------=====------======------=====------======------=====------======------

; LabelCheckTrigger: 			; if needed to recognise when particular windows are active (set a timer and create labels named LabelTriggerOn[number]/LabelTriggerOff[number] - it will go through all of them)
;
;  While ( ProgWinTitle%A_Index% != "" && WinTrigger := WinTrigger%A_Index% )
;    if ( !ProgRunning%A_Index% != !Win%WinTrigger%( ProgWinTitle := ProgWinTitle%A_Index% ) )
;      GoSubSafe( "LabelTriggerO" ( (ProgRunning%A_Index% := !ProgRunning%A_Index%) ? "n" : "ff" ) A_Index )
; Return


GoSubSafe(mySub)
{
	if IsLabel(mySub)
		GoSub %mySub%
}

;-------------------------------------------------------------------------------------------------------------

KeepTrans: ; keep both KeepTrans and TaskBarSet
	IniRead, TransparentStartMenu, settings.ini, settings, TransparentStartMenu, 191
	WinSet, Transparent, %TransparentStartMenu%, ahk_class Shell_TrayWnd
return

TaskBarSet: ; keep both KeepTrans and TaskBarSet
	WinSet, Transparent, %TransparentStartMenu%, ahk_class Shell_TrayWnd
return

;--------------------------------------------------------------------------------------------------------------

;--------------------------------------------------------------------------------------------------------------
GuiSize:
   If (A_EventInfo != 1) 
   {
	  Gui, %A_Gui%:+LastFound
	  WinSet, ReDraw
   }
Return
; ----------------------------------------------------------------------------------------------------------------------
STDRBG:
   GuiControlGet, STDRB1
   CtlColors.Change(RBID1, (STDRB1 ? "Lime" : ""), "006000")
   CtlColors.Change(RBID2, (STDRB1 ? "" : "Lime"), "006000")
Return
; ----------------------------------------------------------------------------------------------------------------------
STDCB1:
   GuiControlGet, STDCB1
   CtlColors.Change(CBID1, (STDCB1 ? "Lime" : "C0C0C0"), "Red")
   Return
; ----------------------------------------------------------------------------------------------------------------------
RBG:
   RBG := SubStr(A_GuiControl, 3)
   If (RBG != RBGA) 
   {
	  CtlColors.Detach(RTID%RBGA%)
	  CtlColors.Attach(RTID%RBG%, "Yellow", "Blue")
	  GuiControl, , RB%RBG%, 1
	  RBGA := RBG
   }
Return
; ----------------------------------------------------------------------------------------------------------------------
LB1:
   GuiControlGet, LB1
   StringSplit, LC, LB1, %A_Space%
   If (%LC2%) 
   {
	  BG := %LC2%, TX := "White"
	  CtlColors.Change(LBID1, BG, TX)
	  SendMessage, LB_SETCURSEL, -1, 0, , ahk_id %LBID1%
   }
Return
; ----------------------------------------------------------------------------------------------------------------------
CB1:
   GuiControlGet, CB1
   If (A_GuiControl = "CT1")
	  CB1 ^= True
   If (CB1)
	  CtlColors.Change(CTID1, "Lime", "406060")
   Else
	  CtlColors.Change(CTID1, "", "Green")
   GuiControl, , CB1, %CB1%
Return
; ----------------------------------------------------------------------------------------------------------------------
CBB1:
Return